Project 4: Code Generation
===========================

Rothanak So (n01128755)


# Purpose

The purpose of this project is to create an intermediate code generator that outputs quadruples for
C- according to the operators used in class. The code generator consumes an abstract syntax tree
(AST) generated by the parser and validated by the semantic analyzer. The code generator visits each
node and generates a set of quadruples for that node, recursively calling children nodes to build
the list. The results of intermediate expressions are assigned to temporary variables. Branch
destinations are first computed as relative jumps and then converted to absolute jumps upon a second
pass of the resulting quadruples list. The resulting list is printed with line numbers. If the input
program is an invalid C- program, nothing will be printed.


# Source files

Source files are located in the root directory. It contains the following files:

   lexer.py             Contains the tokenizer logic, which splits the input file into tokens
   parser.py            Contains the handwritten recursive descent parser and commented grammar
   semantics.py         Contains the semantic analyzer, which operates on an abstract syntax tree
   astnodes.py          Contains the classes for the nodes of the abstract syntax tree
   codegen.py           Contains the code generator, which operates on an abstract syntax tree
   main.py              Calls the parser, lexer, analyzer, and code generator and displays the list


# Input

The program requires an input file to be passed as the first argument to the p4 script.


# Output

The program will output directly to the console. The output will print a list of quadruples if the
input file is a semantically-valid C- program, and nothing if it is not.


# How to execute

The program is written to run with Python 3.6 on Osprey.

  1. Run the `make` command.
  2. Run `./p4`, specifying the input file name.