Project 3: Semantic Analyzer
===========================

Rothanak So (n01128755)


# Purpose

The purpose of this project is to develop a semantic analyzer for C- according to the various
semantic rules. The semantic analyzer consumes an abstract syntax tree (AST) generated by the
parser. The analyzer visits each node on the tree and performs the relevant semantic checks on that
node. Scope is handled with a dictionary of defined functions, a dictionary of variables in  the
current scope, and a list of all open scopes. The analyzer throws an error if the semantic rule is
violated. If the entire program is processed with no errors, the program outputs "ACCEPT".
Otherwise, it outputs "REJECT".


# Source files

Source files are located in the root directory. It contains the following files:

   lexer.py             Contains the tokenizer logic, which splits the input file into tokens
   parser.py            Contains the handwritten recursive descent parser and commented grammar
   semantics.py         Contains the semantic analyzer, which operates on an abstract syntax tree
   astnodes.py          Contains the classes for the nodes of the abstract syntax tree
   main.py              Calls the parser, lexer and analyzer, on the input and displays the output


# Input

The program requires an input file to be passed as the first argument to the p3 script.


# Output

The program will output directly to the console. The output will print ACCEPT if the input file is
a semantically-valid C- program, and REJECT if it is not.


# How to execute

The program is written to run with Python 3.6 on Osprey.

  1. Run the `make` command.
  2. Run `./p3`, specifying the input file name.